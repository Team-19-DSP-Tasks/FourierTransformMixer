# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ftMixer.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon

from ftMixerBackend import Image_Processing_App


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Fourier Transform Mixer")
        MainWindow.resize(1920, 1080)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(10)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()

        # Add the following line to set the window icon
        icon = QIcon("icons/image-processing.png")
        MainWindow.setWindowIcon(icon)

        font.setFamily("Montserrat")
        font.setPointSize(11)
        self.centralwidget.setFont(font)
        self.centralwidget.setStyleSheet(
            "QWidget {\n" "    background-color: rgb(227, 248, 250);\n" "}"
        )
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(6)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.horizontalLayout_11.setStretch(0, 1)
        self.horizontalLayout_11.setContentsMargins(12, 12, 12, 12)
        self.inputPart = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.inputPart.sizePolicy().hasHeightForWidth())
        self.inputPart.setSizePolicy(sizePolicy)
        self.inputPart.setMinimumSize(QtCore.QSize(800, 0))
        self.inputPart.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.inputPart.setStyleSheet(
            "QWidget#inputPart {\n"
            "    border: 2px solid #26c6da;\n"
            "    border-radius: 10px;\n"
            "    padding: 1px 18px 1px 3px;\n"
            "}\n"
            ""
        )
        self.inputPart.setObjectName("inputPart")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.inputPart)
        self.verticalLayout.setObjectName("verticalLayout")
        self.imgBlock01and02 = QtWidgets.QWidget(self.inputPart)

        self.label00 = QtWidgets.QLabel("", MainWindow)
        self.label01 = QtWidgets.QLabel("", MainWindow)
        self.label02 = QtWidgets.QLabel("", MainWindow)
        self.label03 = QtWidgets.QLabel("", MainWindow)

        self.imgBlock01and02.setObjectName("imgBlock01and02")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.imgBlock01and02)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.imgBlock01 = QtWidgets.QWidget(self.imgBlock01and02)
        self.imgBlock01.setStyleSheet(
            "QWidget {\n" "    background-color: rgb(140, 225, 235);\n" "}\n" ""
        )
        self.imgBlock01.setObjectName("imgBlock01")
        self.vl01 = QtWidgets.QVBoxLayout(self.imgBlock01)
        self.vl01.setObjectName("vl01")

        self.VLL01 = QtWidgets.QVBoxLayout()
        self.VLL01.setObjectName("VLL01")

        self.img01 = QtWidgets.QFrame(self.imgBlock01)
        self.img01.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.img01.setFrameShadow(QtWidgets.QFrame.Raised)
        self.img01.setObjectName("img01")

        # Start of Canvas: image 01
        self.horizontalLayout01 = QtWidgets.QVBoxLayout(self.img01)
        self.horizontalLayout01.setObjectName("HorizCanv01")
        self.figure01 = plt.figure()
        self.imgcanvas01 = FigureCanvas(self.figure01)
        self.imgcanvas01ID = 1
        self.horizontalLayout01.addWidget(self.imgcanvas01)
        # End of Canvas: image 01

        self.fourierT01 = QtWidgets.QFrame(self.imgBlock01)
        self.fourierT01.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fourierT01.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fourierT01.setObjectName("fourierT01")

        # Start of Canvas: Fourier 01
        self.horizontalLayout02 = QtWidgets.QHBoxLayout(self.fourierT01)
        self.horizontalLayout02.setObjectName("HorizCanv02")
        self.figure02 = plt.figure()
        self.fftcanvas01 = FigureCanvas(self.figure02)
        self.fftcanvas01ID = 5
        self.fftcanvas01._idPress = None
        self.fftcanvas01._idRelease = None
        self.horizontalLayout02.addWidget(self.fftcanvas01)
        # End of Canvas: Fourier 01

        self.VLL01.addWidget(self.img01)
        self.VLL01.addWidget(self.label00)
        self.VLL01.addWidget(self.fourierT01)
        self.img01atr = QtWidgets.QSlider(QtCore.Qt.Horizontal, MainWindow)
        self.img01atr.setObjectName("img01atr")
        self.vl01.addLayout(self.VLL01)
        self.vl01.addWidget(self.img01atr)
        set_slider_stylesheet_second_color(self.img01atr)
        self.horizontalLayout_6.addWidget(self.imgBlock01)

        ##################################### End of image block 01 #####################################

        self.imageBlock02 = QtWidgets.QWidget(self.imgBlock01and02)
        self.imageBlock02.setStyleSheet(
            "QWidget {\n" "    background-color: rgb(140, 225, 235);\n" "}"
        )
        self.imageBlock02.setObjectName("imageBlock02")
        self.vl02 = QtWidgets.QVBoxLayout(self.imageBlock02)
        self.vl02.setObjectName("vl02")

        self.VLL02 = QtWidgets.QVBoxLayout()
        self.VLL02.setObjectName("VLL02")

        self.img02 = QtWidgets.QFrame(self.imageBlock02)
        self.img02.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.img02.setFrameShadow(QtWidgets.QFrame.Raised)
        self.img02.setObjectName("img02")

        # Start of Canvas: image 02
        self.horizontalLayout03 = QtWidgets.QHBoxLayout(self.img02)
        self.horizontalLayout03.setObjectName("HorizCanv03")
        self.figure03 = plt.figure()
        self.imgcanvas02 = FigureCanvas(self.figure03)
        self.imgcanvas02ID = 2
        self.horizontalLayout03.addWidget(self.imgcanvas02)
        # End of Canvas: image 02

        self.fourierT02 = QtWidgets.QFrame(self.imageBlock02)
        self.fourierT02.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fourierT02.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fourierT02.setObjectName("fourierT02")

        # Start of Canvas: Fourier 02
        self.horizontalLayout04 = QtWidgets.QHBoxLayout(self.fourierT02)
        self.horizontalLayout04.setObjectName("HorizCanv04")
        self.figure04 = plt.figure()
        self.fftcanvas02 = FigureCanvas(self.figure04)
        self.fftcanvas02ID = 6
        self.fftcanvas02._idPress = None
        self.fftcanvas02._idRelease = None
        self.horizontalLayout04.addWidget(self.fftcanvas02)
        # End of Canvas: Fourier 02

        self.VLL02.addWidget(self.img02)
        self.VLL02.addWidget(self.label01)
        self.VLL02.addWidget(self.fourierT02)
        self.img02atr = QtWidgets.QSlider(QtCore.Qt.Horizontal, MainWindow)
        self.img02atr.setObjectName("img02atr")
        self.vl02.addLayout(self.VLL02)
        self.vl02.addWidget(self.img02atr)
        set_slider_stylesheet_second_color(self.img02atr)
        self.horizontalLayout_6.addWidget(self.imageBlock02)

        self.verticalLayout.addWidget(self.imgBlock01and02)

        self.imageBlock03 = QtWidgets.QWidget(self.imgBlock01and02)
        self.imageBlock03.setStyleSheet(
            "QWidget {\n" "    background-color: rgb(140, 225, 235);\n" "}"
        )
        self.imageBlock03.setObjectName("imageBlock03")
        self.vl03 = QtWidgets.QVBoxLayout(self.imageBlock03)
        self.vl03.setObjectName("vl03")

        self.VLL03 = QtWidgets.QVBoxLayout()
        self.VLL03.setObjectName("VLL03")
        self.fourierT03 = QtWidgets.QFrame(self.imageBlock03)
        self.fourierT03.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fourierT03.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fourierT03.setObjectName("fourierT03")

        # Start of Canvas: Fourier 03
        self.horizontalLayout06 = QtWidgets.QHBoxLayout(self.fourierT03)
        self.horizontalLayout06.setObjectName("HorizCanv06")
        self.figure06 = plt.figure()
        self.fftcanvas03 = FigureCanvas(self.figure06)
        self.fftcanvas03ID = 7
        self.fftcanvas03._idPress = None
        self.fftcanvas03._idRelease = None
        self.horizontalLayout06.addWidget(self.fftcanvas03)
        # End of Canvas: Fourier 03

        self.img03 = QtWidgets.QFrame(self.imageBlock03)
        self.img03.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.img03.setFrameShadow(QtWidgets.QFrame.Raised)
        self.img03.setObjectName("img03")

        # Start of Canvas: image 03
        self.horizontalLayout05 = QtWidgets.QHBoxLayout(self.img03)
        self.horizontalLayout05.setObjectName("HorizCanv05")
        self.figure05 = plt.figure()
        self.imgcanvas03 = FigureCanvas(self.figure05)
        self.imgcanvas03ID = 3
        self.horizontalLayout05.addWidget(self.imgcanvas03)
        # End of Canvas: image 03

        self.VLL03.addWidget(self.img03)
        self.VLL03.addWidget(self.label02)
        self.VLL03.addWidget(self.fourierT03)

        self.img03atr = QtWidgets.QSlider(QtCore.Qt.Horizontal, MainWindow)
        self.img03atr.setObjectName("img03atr")
        self.vl03.addLayout(self.VLL03)
        self.vl03.addWidget(self.img03atr)
        set_slider_stylesheet_second_color(self.img03atr)

        self.horizontalLayout_6.addWidget(self.imageBlock03)

        self.imageBlock04 = QtWidgets.QWidget(self.imgBlock01and02)
        self.imageBlock04.setStyleSheet(
            "QWidget {\n" "    background-color: rgb(140, 225, 235);\n" "}"
        )
        self.imageBlock04.setObjectName("imageBlock04")
        self.vl04 = QtWidgets.QVBoxLayout(self.imageBlock04)
        self.vl04.setObjectName("vl04")
        self.VLL04 = QtWidgets.QVBoxLayout()
        self.VLL04.setObjectName("VLL04")
        self.img04 = QtWidgets.QFrame(self.imageBlock04)
        self.img04.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.img04.setFrameShadow(QtWidgets.QFrame.Raised)
        self.img04.setObjectName("img04")

        # Start of Canvas: image 04
        self.horizontalLayout07 = QtWidgets.QHBoxLayout(self.img04)
        self.horizontalLayout07.setObjectName("HorizCanv07")
        self.figure07 = plt.figure()
        self.imgcanvas04 = FigureCanvas(self.figure07)
        self.imgcanvas04ID = 4
        self.horizontalLayout07.addWidget(self.imgcanvas04)
        # End of Canvas: image 04

        self.fourierT04 = QtWidgets.QFrame(self.imageBlock04)
        self.fourierT04.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fourierT04.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fourierT04.setObjectName("fourierT04")

        # Start of Canvas: Fourier 04
        self.horizontalLayout08 = QtWidgets.QHBoxLayout(self.fourierT04)
        self.horizontalLayout08.setObjectName("HorizCanv08")
        self.figure08 = plt.figure()
        self.fftcanvas04 = FigureCanvas(self.figure08)
        self.fftcanvas04ID = 8
        self.fftcanvas04._idPress = None
        self.fftcanvas04._idRelease = None
        self.horizontalLayout08.addWidget(self.fftcanvas04)
        # End of Canvas: Fourier 04

        self.VLL04.addWidget(self.img04)
        self.VLL04.addWidget(self.label03)
        self.VLL04.addWidget(self.fourierT04)
        self.img04atr = QtWidgets.QSlider(QtCore.Qt.Horizontal, MainWindow)
        self.img04atr.setObjectName("img04atr")
        self.vl04.addLayout(self.VLL04)
        self.vl04.addWidget(self.img04atr)
        set_slider_stylesheet_second_color(self.img04atr)
        self.horizontalLayout_6.addWidget(self.imageBlock04)
        self.horizontalLayout_11.addWidget(self.inputPart)
        self.outputPart = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.outputPart.sizePolicy().hasHeightForWidth())
        self.outputPart.setSizePolicy(sizePolicy)
        self.outputPart.setMinimumSize(QtCore.QSize(500, 600))
        self.outputPart.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.outputPart.setStyleSheet(
            "QWidget#outputPart {\n"
            "    border: 2px solid #26c6da;\n"
            "    border-radius: 10px;\n"
            "    padding: 1px 18px 1px 3px;\n"
            "}\n"
            "QFrame#separatingLine {\n"
            "    border: 2px solid #26c6da;\n"
            "    color: #26c6da;\n"
            "}"
        )
        self.outputPart.setObjectName("outputPart")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.outputPart)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")

        self.selectOutputLabel = QtWidgets.QLabel("Select Output Port: ", MainWindow)
        self.selectOutputLabel.setObjectName("selectOutputLabel")

        self.outputPortSelector = QtWidgets.QComboBox(self.outputPart)
        output_ports = ["output_1", "output_2"]
        self.outputPortSelector.addItems(output_ports)
        self.outputPortSelector.setStyleSheet(
            "QComboBox {\n"
            "    background-color: #8ce1eb;\n"
            "    border: 1px solid #999999;\n"
            "    border-radius: 10px;\n"
            "    padding: 1px 18px 1px 3px;\n"
            "    height: 20px;\n"
            "    min-width: 6em;\n"
            "}\n"
            "\n"
            "QComboBox:on { /* shift the text when the popup opens */\n"
            "    padding-top: 3px;\n"
            "    padding-left: 4px;\n"
            "}\n"
            "\n"
            "QComboBox::drop-down {\n"
            "    subcontrol-origin: padding;\n"
            "    subcontrol-position: top right;\n"
            "    width: 25px;\n"
            "\n"
            "    border-left-width: 1px;\n"
            "    border-left-color: rgb(34, 183, 199);\n"
            "    border-left-style: solid;\n"
            "    border-top-right-radius: 3px;\n"
            "    border-bottom-right-radius: 3px;\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow {\n"
            "    image: url(icons/down-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow:on { /* shift the arrow when popup is open */\n"
            "    image: url(icons/up-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "    top: 1px;\n"
            "    left: 1px;\n"
            "}\n"
            "\n"
            "QComboBox QAbstractItemView {\n"
            "    border: 2px solid darkgray;\n"
            "    selection-background-color: #26c6da;\n"
            "}"
        )
        self.outputPortSelector.setObjectName("outputPortSelector")

        self.horizontalLayout_12.addWidget(self.selectOutputLabel)
        self.horizontalLayout_12.addWidget(self.outputPortSelector)

        self.verticalLayout_2.addLayout(self.horizontalLayout_12)
        self.outputPortWidget = QtWidgets.QWidget(self.outputPart)
        self.outputPortWidget.setStyleSheet(
            "QWidget {\n" "    background-color: rgb(140, 225, 235);\n" "}\n" ""
        )
        self.outputPortWidget.setObjectName("outputPortWidget")

        self.outputPortWidget_2 = QtWidgets.QWidget(self.outputPart)
        self.outputPortWidget_2.setStyleSheet(
            "QWidget {\n" "    background-color: rgb(140, 225, 235);\n" "}\n" ""
        )
        self.outputPortWidget_2.setObjectName("outputPortWidget_2")

        self.verticalLayout_2.addWidget(self.outputPortWidget)
        self.verticalLayout_2.addWidget(self.outputPortWidget_2)

        # Add output canvases
        #####################
        # output canvas01
        self.hl01 = QtWidgets.QHBoxLayout(self.outputPortWidget)
        self.hl01.setObjectName("hl01")
        self.output01 = QtWidgets.QFrame(self.outputPortWidget)
        self.output01.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.output01.setFrameShadow(QtWidgets.QFrame.Raised)
        self.output01.setObjectName("output01")
        self.horizontalOutput = QtWidgets.QHBoxLayout(self.output01)
        self.horizontalOutput.setObjectName("horizontalOutput")
        self.outfigure01 = plt.figure()
        self.outCanvas01 = FigureCanvas(self.outfigure01)
        self.outCanvas01ID = 1
        self.horizontalOutput.addWidget(self.outCanvas01)
        self.hl01.addWidget(self.output01)

        #####################
        # output canvas02
        self.hl02 = QtWidgets.QHBoxLayout(self.outputPortWidget_2)
        self.hl02.setObjectName("hl02")
        self.output02 = QtWidgets.QFrame(self.outputPortWidget_2)
        self.output02.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.output02.setFrameShadow(QtWidgets.QFrame.Raised)
        self.output02.setObjectName("output02")
        self.horizontalOutput02 = QtWidgets.QHBoxLayout(self.output02)
        self.horizontalOutput02.setObjectName("horizontalOutput_2")
        self.outfigure02 = plt.figure()
        self.outCanvas02 = FigureCanvas(self.outfigure02)
        self.outCanvas02ID = 2
        self.horizontalOutput02.addWidget(self.outCanvas02)
        self.hl02.addWidget(self.output02)

        # progress bar start
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.progressBar = QtWidgets.QProgressBar()
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout_13.addWidget(self.progressBar)
        self.verticalLayout_2.addLayout(self.horizontalLayout_13)

        self.progressBar.setStyleSheet(
            "QProgressBar {\n"
            "    border: 1px solid #999999;\n"
            "    border-radius: 2px;\n"
            "    text-align: center;\n"
            "}\n"
            "\n"
            "QProgressBar::chunk {\n"
            "    background-color: #26c6da;\n"
            "    width: 20px;\n"
            "}"
        )
        # ================
        # progress bar end

        self.horizontalLayout_11.addWidget(self.outputPart)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setAutoFillBackground(False)
        self.toolBar.setStyleSheet(
            "QToolBar {\n"
            "    background: rgb(227, 248, 250);\n"
            "    padding-right: 100px;\n"
            "    spacing: 6px; /* spacing between items in the tool bar */\n"
            "}"
        )
        self.toolBar.setMovable(False)
        self.toolBar.setFloatable(True)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionOpen_an_image = QtWidgets.QAction(MainWindow)
        self.actionOpen_an_image.setObjectName("actionOpen_an_image")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionRectangle_Selection = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(
            QtGui.QPixmap("icons/rectangle_selection_edited.png"),
            QtGui.QIcon.Normal,
            QtGui.QIcon.Off,
        )
        self.actionRectangle_Selection.setIcon(icon)
        self.actionRectangle_Selection.setObjectName("actionRectangle_Selection")

        # Add a label "select image:"
        self.selectImgLabel = QtWidgets.QLabel("Select image:", MainWindow)
        self.selectImgLabel.setObjectName("selectImgLabel")
        self.selectImgLabel.setFont(font)

        # Add a comboBox to the toolbar for image
        self.imgComboBoxToolbar = QtWidgets.QComboBox(MainWindow)
        self.imgComboBoxToolbar.setObjectName("imgComboBoxToolbar")
        self.imgComboBoxToolbar.setFont(font)
        self.imgComboBoxToolbar.setStyleSheet(
            "QComboBox {\n"
            "    background-color: #8ce1eb;\n"
            "    border: 1px solid #999999;\n"
            "    border-radius: 10px;\n"
            "    padding: 1px 18px 1px 6px;\n"
            "    height: 20px;\n"
            "    min-width: 7em;\n"
            "}\n"
            "\n"
            "QComboBox:on { /* shift the text when the popup opens */\n"
            "    padding-top: 3px;\n"
            "    padding-left: 4px;\n"
            "}\n"
            "\n"
            "QComboBox::drop-down {\n"
            "    subcontrol-origin: padding;\n"
            "    subcontrol-position: top right;\n"
            "    width: 25px;\n"
            "\n"
            "    border-left-width: 1px;\n"
            "    border-left-color: rgb(34, 183, 199);\n"
            "    border-left-style: solid;\n"
            "    border-top-right-radius: 3px;\n"
            "    border-bottom-right-radius: 3px;\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow {\n"
            "    image: url(icons/down-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow:on { /* shift the arrow when popup is open */\n"
            "    image: url(icons/up-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "    top: 1px;\n"
            "    left: 1px;\n"
            "}\n"
            "\n"
            "QComboBox QAbstractItemView {\n"
            "    border: 2px solid darkgray;\n"
            "    selection-background-color: #26c6da;\n"
            "}"
        )

        # Add a label "select FT Component:"
        self.selectFTcompLabel = QtWidgets.QLabel("Select FFT Component:", MainWindow)
        self.selectFTcompLabel.setObjectName("selectFTcompLabel")
        self.selectFTcompLabel.setFont(font)

        # Add a comboBox to the toolbar for FT
        self.ftCombonentComboBox = QtWidgets.QComboBox(MainWindow)
        self.ftCombonentComboBox.setObjectName("ftCombonentComboBox")

        # Set the values for the FT Component combo box
        ft_component_values = ["Magnitude", "Phase"]

        # Add the items to the combo box
        self.ftCombonentComboBox.addItems(ft_component_values)

        # set default component to Magnitude
        self.ftCombonentComboBox.findText("Magnitude")
        self.ftCombonentComboBox.setFont(font)
        self.ftCombonentComboBox.setStyleSheet(
            "QComboBox {\n"
            "    background-color: #8ce1eb;\n"
            "    border: 1px solid #999999;\n"
            "    border-radius: 10px;\n"
            "    padding: 1px 18px 1px 6px;\n"
            "    height: 20px;\n"
            "    min-width: 6em;\n"
            "}\n"
            "\n"
            "QComboBox:on { /* shift the text when the popup opens */\n"
            "    padding-top: 3px;\n"
            "    padding-left: 4px;\n"
            "}\n"
            "\n"
            "QComboBox::drop-down {\n"
            "    subcontrol-origin: padding;\n"
            "    subcontrol-position: top right;\n"
            "    width: 25px;\n"
            "\n"
            "    border-left-width: 1px;\n"
            "    border-left-color: rgb(34, 183, 199);\n"
            "    border-left-style: solid;\n"
            "    border-top-right-radius: 3px;\n"
            "    border-bottom-right-radius: 3px;\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow {\n"
            "    image: url(icons/down-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow:on { /* shift the arrow when popup is open */\n"
            "    image: url(icons/up-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "    top: 1px;\n"
            "    left: 1px;\n"
            "}\n"
            "\n"
            "QComboBox QAbstractItemView {\n"
            "    border: 2px solid darkgray;\n"
            "    selection-background-color:  #26c6da;\n"
            "}"
        )

        self.actionDocumentation = QtWidgets.QAction(MainWindow)
        self.actionDocumentation.setObjectName("actionDocumentation")
        self.menuFile.addAction(self.actionOpen_an_image)
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionDocumentation)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        # Add a label "select region:"
        self.selectRegionLabel = QtWidgets.QLabel("Select Region:", MainWindow)
        self.selectRegionLabel.setObjectName("selectRegionLabel")
        self.selectRegionLabel.setFont(font)

        # Add a comboBox to the toolbar to select inner or outer region
        self.selectRegion = QtWidgets.QComboBox(MainWindow)
        self.selectRegion.setObjectName("selectRegion")
        self.selectRegion.setFont(font)
        selectRegion_values = ["Full Image", "Inner", "Outer"]
        self.selectRegion.setCurrentIndex(1)
        self.selectRegion.addItems(selectRegion_values)

        self.selectRegion.setStyleSheet(
            "QComboBox {\n"
            "    background-color: #8ce1eb;\n"
            "    border: 1px solid #999999;\n"
            "    border-radius: 10px;\n"
            "    padding: 1px 18px 1px 6px;\n"
            "    height: 20px;\n"
            "    min-width: 6em;\n"
            "}\n"
            "\n"
            "QComboBox:on { /* shift the text when the popup opens */\n"
            "    padding-top: 3px;\n"
            "    padding-left: 4px;\n"
            "}\n"
            "\n"
            "QComboBox::drop-down {\n"
            "    subcontrol-origin: padding;\n"
            "    subcontrol-position: top right;\n"
            "    width: 25px;\n"
            "\n"
            "    border-left-width: 1px;\n"
            "    border-left-color: rgb(34, 183, 199);\n"
            "    border-left-style: solid;\n"
            "    border-top-right-radius: 3px;\n"
            "    border-bottom-right-radius: 3px;\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow {\n"
            "    image: url(icons/down-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow:on { /* shift the arrow when popup is open */\n"
            "    image: url(icons/up-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "    top: 1px;\n"
            "    left: 1px;\n"
            "}\n"
            "\n"
            "QComboBox QAbstractItemView {\n"
            "    border: 2px solid darkgray;\n"
            "    selection-background-color: #26c6da;\n"
            "}"
        )

        # Add a label "select mode:"
        self.selectModeLabel = QtWidgets.QLabel("Select mode:", MainWindow)
        self.selectModeLabel.setObjectName("selectModeLabel")
        self.selectModeLabel.setFont(font)

        # Add a comboBox to the toolbar to select the mode
        self.selectMode = QtWidgets.QComboBox(MainWindow)
        self.selectMode.setObjectName("selectMode")
        self.selectMode.setFont(font)
        selectMode_values = ["Magnitude and Phase", "Real and Imaginary"]
        self.selectMode.addItems(selectMode_values)

        self.selectMode.setStyleSheet(
            "QComboBox {\n"
            "    background-color: #8ce1eb;\n"
            "    border: 1px solid #999999;\n"
            "    border-radius: 10px;\n"
            "    padding: 1px 18px 1px 6px;\n"
            "    height: 20px;\n"
            "    min-width: 6em;\n"
            "}\n"
            "\n"
            "QComboBox:on { /* shift the text when the popup opens */\n"
            "    padding-top: 3px;\n"
            "    padding-left: 4px;\n"
            "}\n"
            "\n"
            "QComboBox::drop-down {\n"
            "    subcontrol-origin: padding;\n"
            "    subcontrol-position: top right;\n"
            "    width: 25px;\n"
            "\n"
            "    border-left-width: 1px;\n"
            "    border-left-color: rgb(34, 183, 199);\n"
            "    border-left-style: solid;\n"
            "    border-top-right-radius: 3px;\n"
            "    border-bottom-right-radius: 3px;\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow {\n"
            "    image: url(icons/down-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "}\n"
            "\n"
            "QComboBox::down-arrow:on { /* shift the arrow when popup is open */\n"
            "    image: url(icons/up-arrow.png);\n"
            "    width: 20px; /* set the desired width */\n"
            "    height: 20px; /* set the desired height */\n"
            "    top: 1px;\n"
            "    left: 1px;\n"
            "}\n"
            "\n"
            "QComboBox QAbstractItemView {\n"
            "    border: 2px solid darkgray;\n"
            "    selection-background-color: #26c6da;\n"
            "}"
        )

        # Add a push button for components mixer in the toolbar
        self.mixComponents = QtWidgets.QPushButton("Mix Components", self.toolBar)
        self.mixComponents.setObjectName("mixComponents")
        font.setPointSize(10)
        self.mixComponents.setFont(font)
        self.mixComponents.setCursor(QtCore.Qt.PointingHandCursor)
        self.mixComponents.setStyleSheet(
            """
            QPushButton {
                border: 1px solid #999999;
                border-radius: 7px;
                background: #26c6da;
                padding: 10px 20px;
                height: 16px;
            }
            QPushButton:hover {
                background: #04a7ba;
            }
            QPushButton:pressed {
                background: #26c6da;
            }
        """
        )

        # Add the defined items to the toolbar

        # Define a spacer
        spacer = QtWidgets.QWidget()
        spacer.setFixedSize(4, 4)
        self.toolBar.addWidget(spacer)

        self.toolBar.addWidget(self.selectImgLabel)
        self.toolBar.addWidget(self.imgComboBoxToolbar)
        self.toolBar.addSeparator()
        self.toolBar.addWidget(self.selectFTcompLabel)
        self.toolBar.addWidget(self.ftCombonentComboBox)
        self.toolBar.addSeparator()
        self.toolBar.addWidget(self.selectModeLabel)
        self.toolBar.addWidget(self.selectMode)
        self.toolBar.addSeparator()
        self.toolBar.addWidget(self.selectRegionLabel)
        self.toolBar.addWidget(self.selectRegion)
        self.toolBar.addSeparator()
        self.toolBar.addWidget(self.mixComponents)

        # Option to make a rectangle selection
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionRectangle_Selection)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(
            _translate("MainWindow", "Fourier Transform Mixer")
        )  # Replace with your desired title
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionOpen_an_image.setText(_translate("MainWindow", "Open an image"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionRectangle_Selection.setText(
            _translate("MainWindow", "Rectangle Selection")
        )
        self.actionDocumentation.setText(_translate("MainWindow", "Documentation"))


def set_slider_stylesheet(slider):
    slider.setStyleSheet(
        "QSlider::groove:horizontal {"
        "    border: 1px solid #999999;"
        "    height: 8px;"
        "    background: rgb(140, 225, 235);"
        "    margin: 2px 0;"
        "    border-radius: 5px;"
        "}"
        ""
        "QSlider::handle:horizontal {"
        "    background: rgb(38, 198, 218);"
        "    border: 1px solid #484848;"
        "    width: 18px;"
        "    margin: -2px 0;"
        "    border-radius: 5px;"
        "}"
    )


def set_slider_stylesheet_second_color(slider):
    slider.setStyleSheet(
        "QSlider::groove:horizontal {"
        "    border: 1px solid #999999;"
        "    height: 8px;"
        "    background: rgb(227, 248, 250);"
        "    margin: 2px 0;"
        "    border-radius: 5px;"
        "}"
        ""
        "QSlider::handle:horizontal {"
        "    background: rgb(38, 198, 218);"
        "    border: 1px solid #484848;"
        "    width: 18px;"
        "    margin: -2px 0;"
        "    border-radius: 5px;"
        "}"
    )


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    processing = Image_Processing_App(ui)
    MainWindow.show()
    sys.exit(app.exec_())
